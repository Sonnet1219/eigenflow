版本
日期
作者
备注
需求来源
参考文档
1.0
2025-09-17
@顾勇睿 

基于PRD创建
LP-Margin-Check-V2

Data Gateway
本文档详细定义了 LP Margin Check 系统后端开发的技术职责分工，基于 PRD 需求和现有架构进行任务拆解。
总体架构概述
系统采用 LangGraph 多智能体编排架构，支持三种触发场景：
- 场景A：手动触发 - 用户主动发起的保证金检查
- 场景B：告警触发 - 监控服务检测到风险时自动触发
- 场景C：NLP触发 - 基于自然语言查询的智能触发
技术职责分工
A. 数据工程技术职责
负责数据层面的基础设施建设，包括数据获取、存储、监控和审计等核心数据处理能力。
B. 多智能体编排技术职责
负责业务逻辑编排和智能体协调，包括意图识别、工具调用、人机交互和决策流程等核心业务能力。
- 意图识别系统：实现 NLP 输入的意图分类和槽位提取
- 流程编排引擎：开发 Orchestrator 主流程，支持三种触发场景
- HITL 交互引擎：实现多轮人机交互，支持审批、复查、记忆管理
- AI 内容生成：集成 AI Responder，实现结构化数据到报告文本的转换
- API 接口开发：提供完整的 REST API，支持前端交互和数据导出

---
A. 数据工程（Data）任务 
A1. 数据契约定义与接口对接
目标：建立 Data Gateway 与 LP Margin Check 系统的标准化数据契约
输入：
- Data Gateway API 文档和接口规范 Data Gateway
- LP-Margin-Check-V2 PRD 中的数据需求 LP-Margin-Check-V2
输出：
- 数据字段映射文档（JSON Schema 格式）
- 必需字段与可选扩展字段清单
验收标准：
- 所有 PRD 场景的数据需求都有对应的 Data Gateway 字段映射
- 与 Rocky 确认DataGateWay数据输入输出格式
- 完成至少 3 个完整的端到端数据获取测试

---
A2. LP 保证金监控服务
目标：实现 PRD 场景B 的阈值监控告警触发机制，独立于 margin check 服务运行
服务独立性说明：
- 监控服务独立部署，与 margin check 主服务分离
- 节省 token 消耗，确保快速响应和高可用性
- 专注于数据监控和告警触发，不承担复杂的分析逻辑
输入：
- Data Gateway 保证金数据接口
- 监控阈值配置（可配置的风险水平）
- 告警触发规则和频率设置
输出：
- 实时监控服务：定期轮询 LP 账户保证金水平
- 告警事件：当超过阈值时触发 Orchestrator 调用（配合Tech负责人员联调）
- 监控日志：记录检查频率、阈值变更、告警历史
核心功能：
- 阈值监控：支持多级阈值（警告、严重、紧急）
- 告警自动解除：在任何时候（包括用户正在查看卡片时），如果监控服务检测到风险已解除（例如，由于市场波动或用户在其他系统操作），系统应主动推送一条消息通知用户"风险已解除"，并将相关的告警卡片更新为"已解决"状态，终止该告警流程
- 防止告警风暴：
  - 用户忽略：如果一个告警持续未被处理，系统应遵循预设的通知策略（例如：前5分钟每分钟通知一次，之后降频为每15分钟一次），避免对用户造成过度干扰
  - 用户确认忽略：告警卡片上提供 [Ignore] 按钮。用户点击后，可选择忽略时长（如1小时、4小时、直到下一个工作日）。在此期间，即使条件持续满足，该特定告警也不会再主动推送，但会在后台标记为"已忽略"
  - 阈值抖动防护 (Flapping)：为防止保证金水平在阈值附近反复波动导致连续告警，监控服务应引入迟滞机制 (Hysteresis)。例如，告警在90%触发，但在85%以下才被视为解除
- 爆仓检测：监控服务应增加对"爆仓"状态的检测（例如，equity <= margin 或 margin level 极低且有强制平仓记录）。检测到爆仓后，应触发一个独立的、更高优先级的"账户爆仓"事件，而非普通的保证金告警。该事件的处理流程（如生成事后报告、通知高级管理人员）在当前版本中暂不详细设计，但需预留事件接口
验收标准：
- 监控服务能准确检测保证金水平变化和自动解除
- 告警触发延迟符合预期
- 支持告警抑制和用户忽略机制
- 迟滞机制有效防止告警抖动
- 爆仓检测准确，事件接口预留完整
- 完整记录监控和告警事件日志
交付物：
- 独立的监控服务实现
- 告警风暴防护机制
- 爆仓检测和事件接口
- 配置管理界面或配置文件
- 监控和告警测试用例具备基本的错误重试和日志记录机制

---
A3. 审计日志系统设计
目标：设计完整的审计日志存储和查询系统，支持MarginCheck全流程的完整追溯 
输入：
- LangGraph checkpoint/store 功能文档
- PRD 中 L1/L2 级审计日志需求
- HITL 多轮交互的数据一致性要求
输出：
- 日志存储方案设计
- L1 /L2 级审计日志 API 接口规范
- 数据快照存储和查询策略
验收标准：
- 系统需记录以下结构化日志事件，以供后续审计、复盘和生成交接班报告 LP-Margin-Check-V2
- 支持按 cardId / threadId 查询完整事件链
- 快照数据支持 hash 一致性验证
- API 接口支持单卡片和全局日志查询
交付物：
- 存储架构设计文档
- 日志相关 API 接口实现和测试用例
- 多维度日志查询 API：后端必须提供一个能根据时间、用户等维度查询所有操作日志的API，即使没有前端界面
A4. AI 应用安全调研
目标：
 调研并整理常见的 LLM Applications 风险，结合 LP Margin Check 系统流程，识别每类风险在业务中的潜在发生环节和典型场景，为后续安全设计提供输入。
输入：
- OWASP Top 10 for LLM Applications （AWS讲座上的分享）
- LP-Margin-Check-V2 系统 PRD、数据流与监控逻辑
- 内部合规与安全基线要求
输出：
- 《AI 应用安全风险调研报告》
  - 风险分类清单，包含每类风险的定义说明
  - 在 LP Margin Check 系统中的易发场景以及流程环节定位（用户输入、监控触发、告警下发、报告生成等）
  - 每类风险的常规解决方案，在本业务场景中的解决方案
验收标准：
- 覆盖OWASP Top 10 for LLM Applications 的风险场景
- 每个风险均结合一个 LP Margin Check 的业务场景
- 输出文档结构清晰，便于后续安全方案设计使用
交付物：
- AI 应用安全风险调研文档（Markdown / Word 格式）
- LP Margin Check 流程风险映射表（可选）

---
B. 多智能体编排与开发（Tech）任务
B1. 全流程状态字段传递（严格按 Data Gateway 定义）
目标：确保状态字段在整个流程中的一致性传递和正确更新，与 A1 数据契约定义保持一致
与 A1 任务协调：
- 依赖 A1 任务输出的数据字段映射文档（JSON Schema 格式）
- 严格按照 A1 确认的 Data Gateway 字段规范进行实现
输入：
- A1 输出的数据字段映射文档和必需字段清单
- Data Gateway 状态字段规范
- 流程各阶段的状态变更事件
输出：
- 标准化状态对象：符合 Data Gateway 定义的字段格式
- 状态变更日志：完整的状态转换记录
核心功能：
- 字段映射：严格按照 A1 确认的 Data Gateway 规范进行状态字段转换
- 状态同步：确保内部状态与外部系统保持一致
- 变更追踪：记录所有状态变更的时间戳和触发原因
- 一致性检查：定期验证状态字段的完整性和准确性
验收标准：
- 所有状态字段严格符合 A1 确认的 Data Gateway 定义
- 状态变更有完整的审计轨迹
- 异常状态有fallback和告警机制
交付物：
- 基于 A1 数据契约的状态字段映射配置
- 状态同步服务实现
B2. 意图识别与槽位填充
目标：实现 PRD 场景C 的 NLP 触发，准确识别保证金查询意图并提取 LP 信息
输入：
- 用户自然语言查询
- Data Gateway NLU schema 规范
输出：
- 标准化意图对象：{traceId, schemaVer, intent, slots, occurredAt}
- 槽位信息：LP 名称、查询范围等
核心功能：
- 意图分类：区分保证金查询 vs 一般对话
- LP 名称提取：支持模糊匹配（"CFH" → "[CFH] MAJESTIC FIN TRADE"）
- 置信度评估：低置信度时的处理策略
验收标准：
- 正确识别指定 LP 查询："帮我看看 CFH 账户当前的margin水平" → slots.lp = "[CFH] MAJESTIC FIN TRADE"
- 正确处理全量查询："当前lp账户的整体保证金水平如何？" → slots.lp = null
- 低置信度场景有合理的 fallback 机制
测试用例：提供标准测试案例和边界情况测试

---
B3. 核心编排引擎（Orchestrator）
目标：实现 PRD 三个核心场景的统一编排引擎，支持多触发源的流程管理
输入：
- 标准化事件对象：{triggerType, traceId, slots, occurredAt}
- 触发类型：manual/nlp/monitor
- 槽位参数：LP 筛选条件、查询范围等
- 历史会话记录：messages（用于多轮对话上下文）
输出：
- 编排执行结果：工具调用序列和响应
- 结构化报告：符合 dc/v1-lean schema 的保证金数据
- 审计日志：完整的执行轨迹和决策记录
核心功能：
- 场景A（手动触发）：{triggerType: "manual", slots: {lp: null}} → 全量 LP 检查
- 场景B（告警触发）：{triggerType: "monitor", slots: {lp: "LP_A"}} → 特定 LP 深度分析
- 场景C（NLP触发）：{triggerType: "nlp", slots: {lp: "CFH"}} → 基于意图的定向查询
验收标准：
- 正确路由不同触发类型到对应的处理流程
- 生成符合 PRD 要求的报告卡片格式
- 完整记录执行轨迹和数据快照
- 支持 HITL 中断和恢复机制
交付物：
- LangGraph 编排引擎实现
- 三种场景的测试用例和验证脚本

---
B4. MCP 工具调用与集成
目标：集成 MCP 工具实现数据获取和风险分析计算
输入：
- LP 筛选参数：具体 LP 名称或全量查询标识
- Data Gateway API 规范和 MCP 工具接口
- 风险计算配置：阈值、权重等参数
输出：
- 结构化保证金数据：符合 Data Gateway 的数据契约
- 风险指标计算结果：保证金比率、风险等级、crossCandidates、perLP、recommendations等
- 数据新鲜度标识：时间戳和快照ID
核心功能：
- 数据获取：通过 MCP 工具调用 Data Gateway API
- 风险计算：保证金比率计算、交叉头寸检测
- 数据转换：原始数据映射到标准 schema 格式
- 异常处理：API 调用失败、数据缺失的容错机制
验收标准：
- MCP 工具正确调用 Data Gateway 并获取完整数据
- 风险指标计算准确，符合业务规则
- 输出数据格式符合 Data Gateway 的数据契约规范
- 异常情况有合理的错误处理和降级策略
交付物：
- MCP 工具集成代码和配置
- 风险计算逻辑实现和测试用例
- 异常情况处理（data_issue、partial、超时等）
验收：对接口或者 MCP 工具的调用异常（data_issue / partial）做好错误处理，并写 L1 事件；确保调用逻辑在网络异常时有幂等 key（避免重复分析和数据写入冲突） 支撑。能正确处理MCP的各种返回状态，错误情况有合理降级。

---
B5. HITL 多轮交互引擎
目标：基于 LangGraph interrupt/resume 机制实现人机协作的多轮审批和复查流程
技术实现原理：
- 利用 LangGraph 的 interrupt 机制在需要人工决策时暂停执行流程
- 通过 thread_id 维护会话状态和上下文连续性
- 使用 resume 机制在收到人工反馈后继续执行后续流程
- 支持多轮 interrupt-resume 循环，实现复杂的审批和复查场景
输入：
- 初始触发：风险检测结果超过阈值时自动触发 HITL 流程
- 人工反馈：用户的审批决策（approve/reject/request_more_info）
- 复查请求：用户主动发起的重新检查请求
- 历史上下文：通过 thread_id 关联的完整交互历史
输出：
- 审批卡片：包含风险分析、建议操作、决策选项的交互界面
- 流程状态：当前 HITL 状态（waiting_approval/processing/completed）
- 决策记录：每轮交互的完整审计轨迹和状态变更
核心功能：
- LangGraph 集成：在风险检测节点后插入 interrupt 点，等待人工决策
- 状态持久化：基于 thread_id 保存完整的对话状态和决策历史
- 多轮循环支持：支持"建议→审批→执行→复查→再建议"的完整循环
- 上下文记忆：每轮交互都能访问之前的分析结果和决策记录
- 异常处理：支持审批超时、用户取消、系统异常的恢复机制
验收标准：
- HITL 流程能正确 interrupt 并等待人工输入
- 基于 thread_id 的状态恢复机制工作正常
- 支持多轮复查循环，每轮都能获取最新的风险数据
- 完整记录从初始检测到最终决策的所有交互步骤
- 异常中断后能通过 thread_id 恢复到正确状态
交付物：
- LangGraph HITL 节点实现（interrupt/resume 逻辑）
- 基于 thread_id 的状态管理服务
- 多轮交互测试用例和异常恢复验证

---
B6. AI Responder（Prompt 工程与集成）
目标：将结构化风险数据转换为用户友好的自然语言报告和建议
Prompt 设计与移交流程：
- 技术团队先设计初版 prompt 模板，确保技术可行性和数据对接正确性
- 完成技术验证后，出具单独的 Prompt 设计文档移交给产品团队
- 产品团队（薇媛/Carol）负责评审和润色，优化用户体验和文案质量
- 建立 prompt 版本管理机制，支持产品团队后续迭代优化 
输入：
- MCP 工具输出：结构化保证金数据（Data Gateway 数据契约）
- Prompt 模板：经过产品团队评审润色的文案模板和版本管理
- 上下文信息：历史交互记录、用户偏好等
输出：
- 自然语言报告：风险分析、建议操作、优先级说明
- 卡片元数据：responder_meta 字段更新
- 格式化内容：适配前端展示的结构化文本
核心功能：
- 数据封装：将 MCP 结构化输出转换为 LLM 可理解的输入格式
- 模板管理：支持 prompt template 版本化和动态更新
- 内容生成：基于风险数据生成个性化的分析报告
- 元数据管理：将生成结果写入 card meta 字段
验收标准：
- 生成的报告准确反映风险数据内容
- 支持多种 prompt 模板和版本切换
- 输出格式符合前端展示要求
交付物：
- AI Responder 集成代码
- Prompt 模板管理系统
- 内容生成测试用例

---
B7. 报告导出（PDF / HTML）
目标：提供完整的保证金检查报告导出功能，支持多种格式输出
输入：
- cardId：指定要导出的报告卡片
- 导出格式：PDF 或 HTML 格式选择
- 模板配置：报告样式和布局设置
输出：
- 格式化报告文件：包含完整的分析内容和元数据
- 下载链接：可访问的文件下载地址
- 导出记录：操作日志和文件元信息
核心功能：
- 数据聚合：收集 cardId 相关的所有数据（snapshotId、report_text、recommendations、disclaimers）
- 模板渲染：基于预定义模板生成格式化内容
- 文件生成：支持 PDF 和 HTML 两种格式输出
- 访问控制：确保导出权限和数据安全
验收标准：
- 导出文件包含所有必需字段：cardId、snapshotId(s)、report_text、recommendations、disclaimers
- 文件格式正确，内容完整可读
- 支持批量导出和单个报告导出
- 导出操作有完整的审计记录
交付物：
- 报告导出服务实现
- PDF/HTML 模板设计
- 导出 API 和测试用例

---
C. 核心API设计与场景映射
C1. 核心API端点设计（需支持流式输出）
目标：实现与 PRD 场景对应的标准化 API 接口
重要说明：以下API字段定义仅为示例，最终字段规范请严格参考 Data Gateway 文档和 PRD 文档。
card_id 与 thread_id 关联说明：
- 由于 LangGraph 的 interrupt/resume 机制依赖 thread_id 进行状态管理
- 系统需要维护 card_id 与 thread_id 的映射关系
- 前端通过 card_id 操作，后端内部转换为对应的 thread_id 进行 LangGraph 调用
场景A：手动触发（Manual Trigger）
POST /api/v1/margin-check
Body: {
  "triggerType": "manual",
  "thread_id": "uuid",
  "slots": {
    "lp": null | "specific_lp_name"
  }
}
Response: {
  "card_id": "uuid",
  "thread_id": "uuid", 
  "status": "critical",
  "report": {
    "summary": "风险分析摘要",
    "riskLevel": "medium",
    "recommendations": ["建议1", "建议2"],
    "timestamp": "2024-01-01T10:00:00Z"
    ...
  }
}
场景B：告警触发（Monitor Trigger）
POST /api/v1/margin-check/alert
Body: {
  "triggerType": "monitor",
  "thread_id": "uuid",
  "alertId": "alert_uuid",
  "slots": {
    "lp": "triggered_lp_name"
  }
}
Response: {
  "card_id": "uuid",
  "thread_id": "uuid",
  "status": "critical",
  "report": {
    "summary": "风险分析摘要",
    "riskLevel": "medium",
    "recommendations": ["建议1", "建议2"],
    "triggeredThreshold": "25%",
    "currentMarginLevel": "28%",
    "affectedLPs": ["LP_A"]
    "timestamp": "2024-01-01T10:00:00Z"
    ...
  }
}
场景C：NLP触发（Natural Language）
POST /api/v1/margin-check/nlp
Body: {
  "triggerType": "nlp",
  "thread_id": "langgraph_thread_uuid",
  "userInput": "帮我看看CFH账户的margin水平",
  "slots": {
    "lp": "extracted_lp_name"
  }
}
Response: {
  "card_id": "uuid", 
  "thread_id": "langgraph_thread_uuid",
  "status": "ok",
  "report": {
    "summary": "风险分析摘要",
    "riskLevel": "medium",
    "recommendations": ["建议1", "建议2"],
    "intentContext": {"slot": ""}
    "timestamp": "2024-01-01T10:00:00Z"
    ...
  }
}
HITL 复查端点
POST /api/v1/margin-check/recheck
Body: {
  "card_id": "uuid",           # 前端传入 card_id
  "thread_id": "optional",     # 可选，系统内部通过 card_id 映射获取
  "action": "recheck",
  "userInput": "请重新检查最新数据"
}
Response: {
  "card_id": "uuid",
  "thread_id": "langgraph_thread_uuid", 
  "status": "ok",
  "report": {
    "recheckReason": "user_requested",
    "previousSnapshot": "snapshot_uuid_1",
    "newSnapshot": "snapshot_uuid_2"
  }
}
验收标准：
- 所有API符合RESTful设计规范
- 响应格式统一，错误处理完善
- 支持流式推送和实时状态更新
- API文档完整，包含示例和错误码
交付物：
- API接口实现和路由配置
- OpenAPI规范文档
- API测试套件和Mock数据

---
C2. 辅助API端点
目标：提供完整的系统管理和查询功能
卡片管理API
GET /api/v1/cards/{card_id}           # 获取卡片详情
GET /api/v1/cards/{card_id}/history   # 获取完整事件链
POST /api/v1/cards/{card_id}/export   # 导出报告
告警管理API
POST /api/v1/alerts/start            # 启动告警监控服务
POST /api/v1/alerts/stop             # 关闭告警监控服务
GET /api/v1/alerts/status            # 检查告警服务状态
PUT /api/v1/alerts/policy            # 设置预设通知策略
POST /api/v1/alerts/{alert_id}/ignore # 忽略特定告警
DELETE /api/v1/alerts/{alert_id}/ignore # 取消忽略告警

D. 辅助API端点
D2. 验收说明
- 所有验收中关于阈值、置信度、时延一类的具体数字不在此固定，由产品/运营与 Rocky/数据同学商议后统一配置（系统应支持配置化阈值与置信度边界）。
- 本文档的验收关注点是 数据契约的正确性、流程是否闭环、多轮 HITL 支持、以及日志追溯与审计链路完整性